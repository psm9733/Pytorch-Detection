import os
import sys
from torch import nn
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(os.path.dirname(__file__)))))
from common.layer import ConvBNActivation

class InvertedResidual(nn.Module):
    def __init__(self, in_channels:int, out_channels:int, stride:int, expand_ratio:int, padding:bool=True):
        super().__init__()
        self.stride = stride
        self.expand_ratio = expand_ratio
        self.padding = padding
        self.use_residual_connect = (self.stride == 1 and in_channels == out_channels)
        hidden_dim = int(round(in_channels * expand_ratio))
        self.layers = nn.ModuleList([])
        if expand_ratio != 1:
            self.layers.append(ConvBNActivation(in_channels, out_channels, kernel_size=1, activation_layer=nn.ReLU6(inplace=True)))